Part a)

With Louis’s coercion procedures installed, what happens if apply-generic is called with two arguments of type scheme-number or two arguments of type complex for an operation that is not found in the table for those types? For example, assume that we’ve defined a generic exponentiation operation: 
(define (exp x y) 
  (apply-generic 'exp x y))
and have put a procedure for exponentiation in the Scheme-number package but not in any other package: 
;; following added to Scheme-number package
(put 'exp 
     '(scheme-number scheme-number)
     (lambda (x y) 
       (tag (expt x y)))) 
       ; using primitive expt

What happens if we call exp with two complex numbers as arguments? 
-------
We will start w/ a call to apply-generic, as follows:
(define z-1 (make-complex-from-real-imag 3 4))
(define z-2 (make-complex-from-real-imag 5 7))
(apply-generic 'exp z-1 z-2)

Type-tags becomes the result of mapping the function type-tag across the list of two 
arguments, yielding a list that is (complex complex). We then let proc become the
result of (get exp (complex complex)), which is #f, as exponentiation is not
defined in our procedure table for two complex numbers. Since proc is #f, we fall
through to the else statement in apply-generic. The length of the list of arguments is
2, so we enter the block of let statements. type1 becomes complex, and type2 becomes
complex. a1 becomes z-1 (as defined above), while a2 becomes z-2 likewise.
We now attempt to get a procedure to coerce a complex number to a complex number
for both t1-> and t2->. For the purpose of the exercise, these kind of coercion is 
in the table and defined as simply returning the same elements as they were. 
We then enter the conditional block, and we meet the first criteria, that being
that (t1->t2) exists and is not #f. 
NOTE: The fact that get-coercion returns the empty list means that regardless of
whether or not a coercion exists, the cond block will evaluate the first conditional.
Only #f counts as false, everything else is true. 
So since it decided that such a coercion exists, apply-generic is called again
with the following call:
(apply-generic 'exp (t1->t2 z-1) z-2)
which simplifies to
(apply-generic 'exp (z-1 z-2))
Exactly where we started. So this will probably end up yielding an awful, endless
loop.

Part b)
2. Is Louis correct that something had to be done about coercion with arguments of the same type, or does apply-generic work correctly as is? 
-----
Louis is correct, something is very much amiss with apply-generic when it applied to
an operation that does not exist in the table. As we explained in a), instances
like this can cause endless loops, which are bad juju, as anyone knows. 
So what do we do about this?

Part c)
So we are taking for granted the fact that apply-generic will operate on a list of
arguments that is exactly 2. This is the only condition under which coercion will occur.
All of our generic procedures for the arithmetic package will only take a maximum of
two arguments as well, so this is not a huge deal.
What we can do to correct this problem is to modify the predicate in the second
if statement, where we test whether or not the length of the arguments are 2.
We will add another condition to (= (length args) 2) by making that the first
argument in a compound predicate that tests first that, and then whether or not
the tags of the two arguments are equal. If they are equal, not inverts the boolean
value to false, so that an error is returned rather than entering the coercion code.