
Exercise 2.83: Suppose you are designing a generic arithmetic system for dealing with the tower of types shown in Figure 2.25: integer, rational, real, complex. For each type (except complex), design a procedure that raises objects of that type one level in the tower. Show how to install a generic raise operation that will work for each type (except complex). 

Breaking down the problem:
There are three individual 'raise' procedures that we need to write
a) integer -> rational
   This takes some integer n and creates a rational number with 
   numerator n and denominator 1.
b) rational -> real
   This will divide the numerator of the rational by it's denominator, but the
   tricky part is that we need to coerce it to become a floating point representation,
   rather than dividing some integer by some integer. So that needs some thought.

   A stack overflow article led me to discovering the scheme primative
   exact->inexact, which let's you cast a fraction to a real. This was easily 
   implemented.
c) real -> complex
   This is easy, we construct a complex number with the real part being the 
   given real 'r' and an imaginary part of 0.

   This proves slightly more difficult than expected, since we need to go from
   a real number to a complex, but in this case, we don't have a 'real' package
   or a 'real' type in the table. So how can we tell what is or is not a real number?
   Well, going from our query on exact->inexact, I discovered the table of 
   numerical operations in the scheme standards. This includes a predicate called
   real? which we can use in our 'raise' procedure in the scheme number package.
   If a number is real, that is, not an integer, we can then create a complex
   with real part given and a 0 imaginary part. 

   So in this case, our previous method in the scheme number package,
      (put 'raise '(scheme-number) (lambda (x) (make-rational x 1)))
   will become what is now in the generic arithmetic file, involving an if statement
   that tests for whether or not something is real before deciding how to raise it.