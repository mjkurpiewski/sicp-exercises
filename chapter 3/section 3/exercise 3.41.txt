I believe Ben's fears regarding an unprotected balance getter to be unfounded, to an extent. Perhaps, in an edge situation, one might access the bank account balance during which another transaction, deposit or withdrawal, is occuring on the account. As a result of this, it seems possible that the serialization of the balance getter might be wise, however, as the balance procedure does not actually mutate any data, nor does it afford any access to mutate data, nor is the value of the balance return procedure ever used as input in any other procedure, due to the balance variable being local to the bank account, the tangible benefits of protecting the balance procedure seem limited to making sure that a user will always receive the appropriate, up-to-date balance. This is important for finance and the practical considerations of implementing a system, but it does not seem relevant to the program itself, or causing any undue modifications to local variables.
