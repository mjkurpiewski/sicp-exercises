(load "~/Programming/Scheme/sicp-exercises/chapter 3/section 4/mutex.scm")

(define (exchange account1 account2)
  (let ((difference (- (account1 'balance)
		       (account2 'balance))))
    ((account1 'withdraw) difference)
    ((account2 'deposit) difference)))

(define (serialized-exchange account1 account2)
  (let ((serializer1 (account1 'serializer))
	(serializer2 (account2 'serializer)))
    (if (> (account1 'pid) (account2 'pid))
	((serializer1 (serializer2 exchange))
	 account1
	 account2)
	((serializer2 (serializer1 exchange))
	 account1
	 account2))))

(define (make-account balance)
  (let ((pid (random 15000)))
    (define (withdraw amount)
      (if (>= balance amount)
	  (begin (set! balance
		       (- balance amount))
		 balance)
	  "Insufficient funds"))
    (define (deposit amount)
      (set! balance (+ balance amount))
      balance)
    (let ((protected (make-serializer)))
      (define (dispatch m)
	(cond ((eq? m 'withdraw)
	       withdraw)
	      ((eq? m 'deposit)
	       deposit)
	      ((eq? m 'balance)
	       balance)
	      ((eq? m 'pid)
	       pid)
	      ((eq? m 'serializer)
	       protected)
	      (else (error "Unknown request: MAKE-ACCOUNT" m))))
      dispatch)))
